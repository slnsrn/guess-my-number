{"ast":null,"code":"var _jsxFileName = \"/Users/slnsrn/Documents/Projects/MyGames/GuessNumber/guess-my-number/context/GameContext.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\n\nconst createNumberArray = digits => {\n  const numberArray = [];\n\n  for (let i = 0; i < digits; i++) {\n    numberArray.push({\n      value: Math.floor(Math.random() * 10).toString(),\n      hidden: true\n    });\n  }\n\n  return numberArray;\n};\n\nconst initialState = {\n  player: 'single',\n  digits: 4,\n  rounds: 0,\n  hintsGiven: [],\n  gameStarted: false,\n  numberArray: null,\n  gameResult: null,\n  windowValues: {\n    w: 0\n  }\n};\n\nfunction reducer(state, action) {\n  var _state$numberArray;\n\n  switch (action.type) {\n    case 'SET_PLAYER':\n      return _objectSpread({}, state, {\n        player: action.value\n      });\n\n    case 'SET_DIGITS':\n      return _objectSpread({}, state, {\n        digits: action.value\n      });\n\n    case 'SET_ROUNDS':\n      return _objectSpread({}, state, {\n        rounds: action.value\n      });\n\n    case 'START_GAME':\n      return _objectSpread({}, state, {\n        gameStarted: true,\n        numberArray: createNumberArray(state.digits)\n      });\n\n    case 'END_GAME':\n      return _objectSpread({}, state, {\n        numberArray: (_state$numberArray = state.numberArray) === null || _state$numberArray === void 0 ? void 0 : _state$numberArray.map(el => {\n          return _objectSpread({}, el, {\n            hidden: false\n          });\n        }),\n        gameResult: action.value ? 'won' : 'lost'\n      });\n\n    case 'GIVE_HINT':\n      let given = null;\n      const newArray = state.numberArray.map(number => {\n        if (!given && number.hidden) {\n          number.hidden = false;\n          given = number.value;\n        }\n\n        return number;\n      });\n      return _objectSpread({}, state, {\n        numberArray: newArray,\n        hintsGiven: [...state.hintsGiven, given]\n      });\n\n    case 'RESET':\n      return _objectSpread({}, initialState);\n\n    default:\n      return state;\n  }\n}\n\nexport const GameContext = React.createContext(null);\nGameContext.displayName = 'GameContext';\nexport default (({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const value = {\n    player: state.player,\n    rounds: state.rounds,\n    digits: state.digits,\n    gameStarted: state.gameStarted,\n    numberArray: state.numberArray,\n    gameResult: state.gameResult,\n    hintsGiven: state.hintsGiven,\n    setPlayer: value => dispatch({\n      type: 'SET_PLAYER',\n      value: value\n    }),\n    setDigits: value => dispatch({\n      type: 'SET_DIGITS',\n      value: value\n    }),\n    setRounds: value => dispatch({\n      type: 'SET_ROUNDS',\n      value: value\n    }),\n    resetGame: () => dispatch({\n      type: 'RESET'\n    }),\n    startGame: () => dispatch({\n      type: 'START_GAME'\n    }),\n    giveHint: () => dispatch({\n      type: 'GIVE_HINT'\n    }),\n    endGame: value => dispatch({\n      type: 'END_GAME',\n      value: value\n    })\n  };\n  return __jsx(GameContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/slnsrn/Documents/Projects/MyGames/GuessNumber/guess-my-number/context/GameContext.tsx"],"names":["React","createNumberArray","digits","numberArray","i","push","value","Math","floor","random","toString","hidden","initialState","player","rounds","hintsGiven","gameStarted","gameResult","windowValues","w","reducer","state","action","type","map","el","given","newArray","number","GameContext","createContext","displayName","children","dispatch","useReducer","setPlayer","setDigits","setRounds","resetGame","startGame","giveHint","endGame"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Digit from '../types/Digit'\nimport Player from '../types/Player'\nimport Round from '../types/Round'\n\n\nconst createNumberArray = (digits: number)=>{\n  const numberArray:NumberArray=[]\n  for(let i=0; i<digits; i++){\n    numberArray.push({value:(Math.floor(Math.random()* 10)).toString(), hidden:true})\n  }\n  return numberArray\n}\ntype NumberArray = {value: string, hidden:boolean}[]\n\ninterface State {\n  player: Player\n  digits: Digit\n  rounds: Round\n  gameStarted: boolean\n  numberArray: NumberArray|null\n  hintsGiven: string[]\n  gameResult:'won'|'lost'|null\n  windowValues: { w:number, h:number}\n}\n\nconst initialState:State = {\n  player: 'single',\n  digits: 4,\n  rounds: 0,\n  hintsGiven:[],\n  gameStarted:false,\n  numberArray: null,\n  gameResult: null,\n  windowValues:{w:0}\n}\n\ntype Action = {type: 'SET_PLAYER', value: Player}\n            | {type: 'SET_DIGITS', value: Digit}\n            | {type: 'SET_ROUNDS', value: Round}\n            | {type: 'END_GAME', value:boolean}\n            | {type: 'START_GAME'}\n            | {type: 'GIVE_HINT'}\n            | {type: 'RESET' }\n\nfunction reducer(state:State, action:Action):State {\n  switch (action.type) {\n    case 'SET_PLAYER':\n      return {...state, player: action.value}\n    case 'SET_DIGITS':\n      return {...state, digits: action.value}\n    case 'SET_ROUNDS':\n      return {...state, rounds: action.value}\n    case 'START_GAME':\n        return {...state,\n          gameStarted: true,\n          numberArray: createNumberArray(state.digits)\n        }\n    case 'END_GAME':\n        return {...state,\n          numberArray: state.numberArray?.map(el=>{return {...el, hidden:false}})!,\n          gameResult: action.value ? 'won':'lost'\n        }\n    case 'GIVE_HINT':\n        let given:string|null= null\n        const newArray = state.numberArray!.map(number=>{\n          if(!given && number.hidden){\n            number.hidden=false\n\n            given=number.value\n          }\n          return number\n        })\n        return {...state,\n          numberArray: newArray,\n          hintsGiven:[...state.hintsGiven, given!]\n        }\n    case 'RESET':\n      return {...initialState}\n    default:\n      return state\n  }\n}\n\ntype ContextValue = State & {\n  setPlayer(value: string): void\n  setDigits(value: number): void\n  setRounds(value: number|string): void\n  endGame(value:boolean): void\n  resetGame(): void\n  startGame(): void\n  giveHint(): void\n}\n\nexport const GameContext = React.createContext<ContextValue>(null!)\nGameContext.displayName = 'GameContext'\n\nexport default ({children}:{children:React.ReactNode}) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  const value:ContextValue = {\n    player: state.player,\n    rounds: state.rounds,\n    digits: state.digits,\n    gameStarted: state.gameStarted,\n    numberArray: state.numberArray,\n    gameResult: state.gameResult,\n    hintsGiven:state.hintsGiven,\n    setPlayer: (value:Player) =>\n      dispatch({\n        type: 'SET_PLAYER',\n        value: value\n      }),\n    setDigits: (value:Digit) =>\n      dispatch({\n        type: 'SET_DIGITS',\n        value: value\n      }),\n    setRounds: (value:Round) =>\n      dispatch({\n        type: 'SET_ROUNDS',\n        value: value\n      }),\n    resetGame: () =>\n      dispatch({\n        type: 'RESET'\n      }),\n    startGame: () =>\n      dispatch({\n        type: 'START_GAME'\n      }),\n    giveHint: () =>\n      dispatch({\n        type: 'GIVE_HINT'\n      }),\n    endGame:(value:boolean) =>\n      dispatch({\n        type: 'END_GAME',\n        value: value\n      })\n  }\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}