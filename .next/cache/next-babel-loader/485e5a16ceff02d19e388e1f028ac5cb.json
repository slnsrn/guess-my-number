{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useContext, useState, useEffect } from 'react';\nimport cx from 'classnames';\nimport { GameContext } from '../context/GameContext';\nimport { scrollTop } from '../utils';\nimport GuessRow from './GuessRow';\nimport Button from './Button';\nimport SettingsTool from './SettingsTool';\nimport NumberSign from './NumberSign';\nimport PartyBackground from './PartyBackground';\nimport Confetti from './Confetti';\nvar defaultGuess = {\n  value: [],\n  round: 1,\n  result: {},\n  passed: false\n};\n\nvar createControlArray = function createControlArray(numberArray) {\n  return numberArray.map(function (n) {\n    return {\n      value: n.value,\n      checked: false\n    };\n  });\n};\n\nexport default function GameBoard() {\n  var _useContext = useContext(GameContext),\n      digits = _useContext.digits,\n      rounds = _useContext.rounds,\n      gameStarted = _useContext.gameStarted,\n      resetGame = _useContext.resetGame,\n      numberArray = _useContext.numberArray,\n      endGame = _useContext.endGame,\n      gameResult = _useContext.gameResult;\n\n  var _useState = useState([_objectSpread({}, defaultGuess)]),\n      guesses = _useState[0],\n      setGuesses = _useState[1];\n\n  var _useState2 = useState(false),\n      partyModeOn = _useState2[0],\n      setPartyModeOn = _useState2[1];\n\n  var returnGuessRow = function returnGuessRow(guess) {\n    return __jsx(GuessRow, {\n      key: guess.round,\n      guess: guess,\n      guessNumber: guessNumber,\n      currentRound: guesses.length\n    });\n  };\n\n  useEffect(function () {\n    //reset the game\n    setGuesses([_objectSpread({}, defaultGuess)]);\n  }, [gameStarted]);\n\n  var guessNumber = function guessNumber(guessArray) {\n    var controlArray = createControlArray(numberArray);\n    var result = {};\n    var remaining = guessArray.map(function (val, i) {\n      if (val === controlArray[i].value) {\n        controlArray[i].checked = true;\n        result.plus = result.plus ? result.plus + 1 : 1;\n      } else {\n        return val;\n      }\n    });\n    controlArray.filter(function (el) {\n      return !el.checked;\n    }).map(function (el) {\n      if (remaining.includes(el.value)) {\n        var index = remaining.findIndex(function (n) {\n          return n === el.value;\n        });\n        remaining.splice(index, 1);\n        result.minus = result.minus ? result.minus + 1 : 1;\n      }\n    });\n\n    if (!result.minus && !result.plus) {\n      result.missed = true;\n    }\n\n    var guess = {\n      value: guessArray,\n      round: guesses.length,\n      result: result,\n      passed: true\n    };\n    var newList = guesses.concat();\n    newList.pop();\n    newList.push(guess);\n\n    if (result.plus === digits || rounds === guesses.length) {\n      endGame(result.plus === digits);\n      scrollTop();\n    } else {\n      if (!rounds || guesses.length < rounds) {\n        newList.push(_objectSpread({}, defaultGuess, {\n          round: guesses.length + 1\n        }));\n      }\n    }\n\n    setGuesses(newList);\n  };\n\n  var myMessage = !gameResult ? gameStarted ? \"You have \".concat(rounds === 0 ? 'unlimited' : rounds, \" rounds to guess my number. Start writing your guess and see the results ;)\") : 'Set your preferences and start playing!' : \"You have \".concat(gameResult, \"!\");\n\n  var returnInstructions = function returnInstructions() {\n    if (!gameStarted || !!gameResult) return;\n    return __jsx(\"div\", {\n      className: \"text-xs lg:text-sm\"\n    }, __jsx(\"span\", {\n      className: \"self-center\"\n    }, \"When you have \"), __jsx(\"div\", {\n      className: \"flex flex-col lg:flex-row pl-2 lg:pl-12\"\n    }, __jsx(\"span\", {\n      className: \"self-center lg:mr-4\"\n    }, \"a match: \"), __jsx(\"div\", {\n      className: \"self-center nes-badge plus\"\n    }, __jsx(\"span\", {\n      className: \"is-success\"\n    }, \"cuk!\"))), __jsx(\"div\", {\n      className: \"flex flex-col lg:flex-row  pl-2 lg:pl-12\"\n    }, __jsx(\"span\", {\n      className: \"self-center lg:mr-4\"\n    }, \"a wrong placed: \"), __jsx(\"div\", {\n      className: \"self-center nes-badge wide\"\n    }, __jsx(\"span\", {\n      className: \"is-warning\"\n    }, \"position wrong!\"))), __jsx(\"div\", {\n      className: \"flex flex-col lg:flex-row  pl-2 lg:pl-12\"\n    }, __jsx(\"span\", {\n      className: \"self-center lg:mr-4\"\n    }, \"no match: \"), __jsx(\"div\", {\n      className: \"self-center nes-badge wide\"\n    }, __jsx(\"span\", {\n      className: \"is-error\"\n    }, \"Ups! you missed it!\"))));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: cx({\n      'hidden': !partyModeOn\n    }, 'w-full h-full top-0 left-0')\n  }, __jsx(PartyBackground, null)), __jsx(\"div\", {\n    className: \"px-4 py-6 lg:px-20 md:py-8 shadow bg-white w-full sm-grid-sm md:w-grid-md lg:w-grid-lg xl:w-grid-xl mx-auto\"\n  }, __jsx(\"div\", {\n    className: \"nes-container custom-padding with-title\"\n  }, __jsx(\"p\", {\n    className: \"title\"\n  }, \"A Cool's Game\"), __jsx(\"div\", {\n    className: \" ml-12 md:ml-20 mt-12 md:mt-8 flex\"\n  }, __jsx(\"div\", {\n    className: \"nes-balloon from-left\"\n  }, __jsx(\"p\", {\n    className: \"text-sm md:text-base\"\n  }, myMessage), returnInstructions())), __jsx(\"i\", {\n    className: \"-mt-8 nes-octocat animate\"\n  }), gameResult === 'won' && __jsx(Confetti, null), __jsx(SettingsTool, null), __jsx(NumberSign, null), gameStarted && __jsx(\"div\", null, guesses.map(returnGuessRow), __jsx(\"div\", {\n    className: \"pt-16\"\n  }, __jsx(Button, {\n    onClick: resetGame,\n    label: \"Reset game\"\n  }))))), __jsx(\"label\", {\n    className: \"w-full text-right mt-4\"\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"nes-checkbox is-dark\",\n    checked: partyModeOn,\n    onChange: function onChange() {\n      return setPartyModeOn(function (prevMode) {\n        return !prevMode;\n      });\n    }\n  }), __jsx(\"span\", null, \"Enable party mode\")));\n}","map":null,"metadata":{},"sourceType":"module"}