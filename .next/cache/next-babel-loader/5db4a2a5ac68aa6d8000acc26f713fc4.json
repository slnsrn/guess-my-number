{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { rnd } from '../utils';\nimport { useMemo, useEffect, useState } from 'react';\nimport debounce from 'lodash/debounce';\nconst colors = ['#e76e55', '#FF00CC', '#EE34D2', '#FF6EFF', '#50BFE6', '#AAF0D1', '#66FF66', '#CCFF00', '#FFFF66', '#FFFF66', '#FFCC33', '#FF9933', '#FF9966', '#FF6037', '#FD5B78', '#FF355E'];\nconst animation = ['shine2', 'shine1', 'shine3'];\n\nconst createBall = windowValues => {\n  const w = rnd(0.5, 1);\n  const h = rnd(0.5, 1);\n  const color = colors[Math.floor(Math.random() * colors.length)];\n  const spanCss = css`\n    color: ${color};\n    background-color: ${color};\n    box-shadow: 0 0.5em ${color}, 0 -0.5em ${color}, 0.5em 0 ${color}, -0.5em 0 ${color};`;\n  const containerCss = css`\n        left: ${Math.random() * (window.innerWidth - 2)}px;\n        top: ${Math.random() * (window.innerHeight - 2)}px;`;\n  const ballCss = css`\n        height: ${h}em;\n        transition-duration:.45s;\n        display:inline-block;\n        transition-duration:1.4s;\n        transition-timing-function: cubic-bezier(.43,-0.28,.25,1.37);\n        font-size: ${rnd(6, 10)}px;\n        background:  ${color};\n        opacity: ${Math.random()};\n        animation: ${animation[rnd(0, 2)]} 1s infinite;\n    `;\n  return jsx(\"div\", {\n    key: Math.random(),\n    className: \"absolute\",\n    css: containerCss\n  }, jsx(\"div\", {\n    css: ballCss,\n    className: \"ball\"\n  }, jsx(\"span\", {\n    css: spanCss\n  }, \"1\")));\n};\n\nexport default function PartyBackground() {\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(() => false ? {\n    w: window.innerWidth,\n    h: window.innerHeight\n  } : {\n    w: 0,\n    h: 0\n  });\n  const balls = useMemo(() => {\n    if (false) {\n      return Array.from({\n        length: 400\n      }, item => createBall(windowSize));\n    } else {\n      return [];\n    }\n  }, [windowSize]);\n  useEffect(() => {\n    if (!false) return;\n    const handleResize = debounce(() => {\n      if (window.innerHeight > windowSize.h || window.innerWidth > windowSize.w) setWindowSize({\n        w: window.innerWidth,\n        h: window.innerHeight\n      });\n    }, 100);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.cancel();\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n  return jsx(\"div\", {\n    className: \"fixed top-0 left-0 z-1-\"\n  }, balls);\n}","map":null,"metadata":{},"sourceType":"module"}