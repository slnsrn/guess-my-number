{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\n\nvar createNumberArray = function createNumberArray(digits) {\n  var numberArray = [];\n\n  for (var i = 0; i < digits; i++) {\n    numberArray.push({\n      value: Math.floor(Math.random() * 10).toString(),\n      hidden: true\n    });\n  }\n\n  return numberArray;\n};\n\nvar initialState = {\n  player: 'single',\n  digits: 4,\n  rounds: 0,\n  hintsGiven: [],\n  gameStarted: false,\n  numberArray: null,\n  gameResult: null\n};\n\nfunction reducer(state, action) {\n  var _state$numberArray;\n\n  switch (action.type) {\n    case 'SET_PLAYER':\n      return _objectSpread({}, state, {\n        player: action.value\n      });\n\n    case 'SET_DIGITS':\n      return _objectSpread({}, state, {\n        digits: action.value\n      });\n\n    case 'SET_ROUNDS':\n      return _objectSpread({}, state, {\n        rounds: action.value\n      });\n\n    case 'START_GAME':\n      return _objectSpread({}, state, {\n        gameStarted: true,\n        numberArray: createNumberArray(state.digits)\n      });\n\n    case 'END_GAME':\n      return _objectSpread({}, state, {\n        numberArray: (_state$numberArray = state.numberArray) === null || _state$numberArray === void 0 ? void 0 : _state$numberArray.map(function (el) {\n          return _objectSpread({}, el, {\n            hidden: false\n          });\n        }),\n        gameResult: action.value ? 'won' : 'lost'\n      });\n\n    case 'GIVE_HINT':\n      var given = null;\n      var newArray = state.numberArray.map(function (number) {\n        if (!given && number.hidden) {\n          number.hidden = false;\n          given = number.value;\n        }\n\n        return number;\n      });\n      return _objectSpread({}, state, {\n        numberArray: newArray,\n        hintsGiven: [].concat(_toConsumableArray(state.hintsGiven), [given])\n      });\n\n    case 'RESET':\n      return _objectSpread({}, initialState);\n\n    default:\n      return state;\n  }\n}\n\nexport var GameContext = React.createContext(null);\nGameContext.displayName = 'GameContext';\nexport default (function (_ref) {\n  var children = _ref.children;\n\n  var _React$useReducer = React.useReducer(reducer, initialState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var value = {\n    player: state.player,\n    rounds: state.rounds,\n    digits: state.digits,\n    gameStarted: state.gameStarted,\n    numberArray: state.numberArray,\n    gameResult: state.gameResult,\n    hintsGiven: state.hintsGiven,\n    setPlayer: function setPlayer(value) {\n      return dispatch({\n        type: 'SET_PLAYER',\n        value: value\n      });\n    },\n    setDigits: function setDigits(value) {\n      return dispatch({\n        type: 'SET_DIGITS',\n        value: value\n      });\n    },\n    setRounds: function setRounds(value) {\n      return dispatch({\n        type: 'SET_ROUNDS',\n        value: value\n      });\n    },\n    resetGame: function resetGame() {\n      return dispatch({\n        type: 'RESET'\n      });\n    },\n    startGame: function startGame() {\n      return dispatch({\n        type: 'START_GAME'\n      });\n    },\n    giveHint: function giveHint() {\n      return dispatch({\n        type: 'GIVE_HINT'\n      });\n    },\n    endGame: function endGame(value) {\n      return dispatch({\n        type: 'END_GAME',\n        value: value\n      });\n    }\n  };\n  return __jsx(GameContext.Provider, {\n    value: value\n  }, children);\n});","map":null,"metadata":{},"sourceType":"module"}