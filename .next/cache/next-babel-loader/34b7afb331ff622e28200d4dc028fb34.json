{"ast":null,"code":"var _jsxFileName = \"/Users/slnsrn/Documents/Projects/MyGames/GuessNumber/guess-my-number/context/GameContext.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\n\nconst createNumberArray = digits => {\n  const numberArray = [];\n\n  for (let i = 0; i < digits; i++) {\n    numberArray.push({\n      value: Math.floor(Math.random() * 10).toString(),\n      hidden: true\n    });\n  }\n\n  return numberArray;\n};\n\nconst initialState = {\n  player: 'single',\n  digits: 4,\n  rounds: 0,\n  gameStarted: false,\n  numberArray: null,\n  gameResult: null\n};\n\nfunction reducer(state, action) {\n  var _state$numberArray, _state$numberArray2, _state$numberArray3;\n\n  switch (action.type) {\n    case 'SET_PLAYER':\n      return _objectSpread({}, state, {\n        player: action.value\n      });\n\n    case 'SET_DIGITS':\n      return _objectSpread({}, state, {\n        digits: action.value\n      });\n\n    case 'SET_ROUNDS':\n      return _objectSpread({}, state, {\n        rounds: action.value\n      });\n\n    case 'START_GAME':\n      return _objectSpread({}, state, {\n        gameStarted: true,\n        numberArray: createNumberArray(state.digits)\n      });\n\n    case 'END_GAME':\n      return _objectSpread({}, state, {\n        numberArray: (_state$numberArray = state.numberArray) === null || _state$numberArray === void 0 ? void 0 : _state$numberArray.map(el => {\n          return _objectSpread({}, el, {\n            hidden: false\n          });\n        }),\n        gameResult: action.value ? 'won' : 'lost'\n      });\n\n    case 'GIVE_HINT':\n      const hint = (_state$numberArray2 = state.numberArray) === null || _state$numberArray2 === void 0 ? void 0 : _state$numberArray2.find(el => {\n        return _objectSpread({}, el, {\n          hidden: false\n        });\n      });\n      return _objectSpread({}, state, {\n        numberArray: (_state$numberArray3 = state.numberArray) === null || _state$numberArray3 === void 0 ? void 0 : _state$numberArray3.map(el => {\n          return _objectSpread({}, el, {\n            hidden: false\n          });\n        })\n      });\n\n    case 'RESET':\n      return _objectSpread({}, initialState);\n\n    default:\n      return state;\n  }\n}\n\nexport const GameContext = React.createContext(null);\nGameContext.displayName = 'GameContext';\nexport default (({\n  children\n}) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const value = {\n    player: state.player,\n    rounds: state.rounds,\n    digits: state.digits,\n    gameStarted: state.gameStarted,\n    numberArray: state.numberArray,\n    gameResult: state.gameResult,\n    setPlayer: value => dispatch({\n      type: 'SET_PLAYER',\n      value: value\n    }),\n    setDigits: value => dispatch({\n      type: 'SET_DIGITS',\n      value: value\n    }),\n    setRounds: value => dispatch({\n      type: 'SET_ROUNDS',\n      value: value\n    }),\n    resetGame: () => dispatch({\n      type: 'RESET'\n    }),\n    startGame: () => dispatch({\n      type: 'START_GAME'\n    }),\n    endGame: value => dispatch({\n      type: 'END_GAME',\n      value: value\n    })\n  };\n  return __jsx(GameContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, children);\n});","map":{"version":3,"sources":["/Users/slnsrn/Documents/Projects/MyGames/GuessNumber/guess-my-number/context/GameContext.tsx"],"names":["React","createNumberArray","digits","numberArray","i","push","value","Math","floor","random","toString","hidden","initialState","player","rounds","gameStarted","gameResult","reducer","state","action","type","map","el","hint","find","GameContext","createContext","displayName","children","dispatch","useReducer","setPlayer","setDigits","setRounds","resetGame","startGame","endGame"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Digit from '../types/Digit'\nimport Player from '../types/Player'\nimport Round from '../types/Round'\n\n\nconst createNumberArray = (digits: number)=>{\n  const numberArray:NumberArray=[]\n  for(let i=0; i<digits; i++){\n    numberArray.push({value:(Math.floor(Math.random()* 10)).toString(), hidden:true})\n  }\n  return numberArray\n}\ntype NumberArray = {value: string, hidden:boolean}[]\n\ninterface State {\n  player: Player\n  digits: Digit\n  rounds: Round,\n  gameStarted: boolean\n  numberArray: NumberArray|null,\n  gameResult:'won'|'lost'|null\n}\n\nconst initialState:State = {\n  player: 'single',\n  digits: 4,\n  rounds: 0,\n  gameStarted:false,\n  numberArray: null,\n  gameResult: null,\n}\n\ntype Action = {type: 'SET_PLAYER', value: Player}\n            | {type: 'SET_DIGITS', value: Digit}\n            | {type: 'SET_ROUNDS', value: Round}\n            | {type: 'END_GAME', value:boolean}\n            | {type: 'START_GAME'}\n            | {type: 'GIVE_HINT'}\n            | {type: 'RESET' }\n\nfunction reducer(state:State, action:Action):State {\n  switch (action.type) {\n    case 'SET_PLAYER':\n      return {...state, player: action.value}\n    case 'SET_DIGITS':\n      return {...state, digits: action.value}\n    case 'SET_ROUNDS':\n      return {...state, rounds: action.value}\n    case 'START_GAME':\n        return {...state,\n          gameStarted: true,\n          numberArray: createNumberArray(state.digits)\n        }\n    case 'END_GAME':\n        return {...state,\n          numberArray: state.numberArray?.map(el=>{return {...el, hidden:false}})!,\n          gameResult: action.value ? 'won':'lost'\n        }\n    case 'GIVE_HINT':\n        const hint = state.numberArray?.find(el=>{return {...el, hidden:false}})!\n        return {...state,\n          numberArray: state.numberArray?.map(el=>{return {...el, hidden:false}})!,\n        }\n    case 'RESET':\n      return {...initialState}\n    default:\n      return state\n  }\n}\n\ntype ContextValue = State & {\n  setPlayer(value: string): void\n  setDigits(value: number): void\n  setRounds(value: number|string): void\n  endGame(value:boolean): void\n  resetGame(): void\n  startGame(): void\n  giveHint(): void\n}\n\nexport const GameContext = React.createContext<ContextValue>(null!)\nGameContext.displayName = 'GameContext'\n\nexport default ({children}:{children:React.ReactNode}) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n\n  const value:ContextValue = {\n    player: state.player,\n    rounds: state.rounds,\n    digits: state.digits,\n    gameStarted: state.gameStarted,\n    numberArray: state.numberArray,\n    gameResult: state.gameResult,\n    setPlayer: (value:Player) =>\n      dispatch({\n        type: 'SET_PLAYER',\n        value: value\n      }),\n    setDigits: (value:Digit) =>\n      dispatch({\n        type: 'SET_DIGITS',\n        value: value\n      }),\n    setRounds: (value:Round) =>\n      dispatch({\n        type: 'SET_ROUNDS',\n        value: value\n      }),\n    resetGame: () =>\n      dispatch({\n        type: 'RESET'\n      }),\n    startGame: () =>\n      dispatch({\n        type: 'START_GAME'\n      }),\n    endGame:(value:boolean) =>\n      dispatch({\n        type: 'END_GAME',\n        value: value\n      })\n  }\n\n  return (\n    <GameContext.Provider value={value}>\n      {children}\n    </GameContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}